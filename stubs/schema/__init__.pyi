"""
This type stub file was generated by pyright.
"""

import inspect
import re
from contextlib import ExitStack

"""schema is a library for validating Python data structures, such as those
obtained from config-files, forms, external services or command-line
parsing, converted from JSON/YAML (or something else) to Python data-types."""
__version__ = ...
__all__ = ["Schema", "And", "Or", "Regex", "Optional", "Use", "Forbidden", "Const", "Literal", "SchemaError", "SchemaWrongKeyError", "SchemaMissingKeyError", "SchemaForbiddenKeyError", "SchemaUnexpectedTypeError", "SchemaOnlyOneAllowedError"]
class SchemaError(Exception):
    """Error during Schema validation."""
    def __init__(self, autos, errors=...) -> None:
        ...
    
    @property
    def code(self): # -> LiteralString:
        """
        Removes duplicates values in auto and error list.
        parameters.
        """
        ...
    


class SchemaWrongKeyError(SchemaError):
    """Error Should be raised when an unexpected key is detected within the
    data set being."""
    ...


class SchemaMissingKeyError(SchemaError):
    """Error should be raised when a mandatory key is not found within the
    data set being validated"""
    ...


class SchemaOnlyOneAllowedError(SchemaError):
    """Error should be raised when an only_one Or key has multiple matching candidates"""
    ...


class SchemaForbiddenKeyError(SchemaError):
    """Error should be raised when a forbidden key is found within the
    data set being validated, and its value matches the value that was specified"""
    ...


class SchemaUnexpectedTypeError(SchemaError):
    """Error should be raised when a type mismatch is detected within the
    data set being validated."""
    ...


class And:
    """
    Utility function to combine validation directives in AND Boolean fashion.
    """
    def __init__(self, *args, **kw) -> None:
        ...
    
    def __repr__(self): # -> str:
        ...
    
    @property
    def args(self): # -> tuple[Any, ...]:
        """The provided parameters"""
        ...
    
    def validate(self, data, **kwargs):
        """
        Validate data using defined sub schema/expressions ensuring all
        values are valid.
        :param data: to be validated with sub defined schemas.
        :return: returns validated data
        """
        ...
    


class Or(And):
    """Utility function to combine validation directives in a OR Boolean
    fashion."""
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    def reset(self): # -> None:
        ...
    
    def validate(self, data, **kwargs):
        """
        Validate data using sub defined schema/expressions ensuring at least
        one value is valid.
        :param data: data to be validated by provided schema.
        :return: return validated data if not validation
        """
        ...
    


class Regex:
    """
    Enables schema.py to validate string using regular expressions.
    """
    NAMES = ...
    def __init__(self, pattern_str, flags=..., error=...) -> None:
        ...
    
    def __repr__(self): # -> str:
        ...
    
    @property
    def pattern_str(self): # -> Any:
        """The pattern for the represented regular expression"""
        ...
    
    def validate(self, data, **kwargs):
        """
        Validated data using defined regex.
        :param data: data to be validated
        :return: return validated data.
        """
        ...
    


class Use:
    """
    For more general use cases, you can use the Use class to transform
    the data while it is being validate.
    """
    def __init__(self, callable_, error=...) -> None:
        ...
    
    def __repr__(self): # -> str:
        ...
    
    def validate(self, data, **kwargs):
        ...
    


class Schema:
    """
    Entry point of the library, use this class to instantiate validation
    schema for the data that will be validated.
    """
    def __init__(self, schema, error=..., ignore_extra_keys=..., name=..., description=..., as_reference=...) -> None:
        ...
    
    def __repr__(self): # -> str:
        ...
    
    @property
    def schema(self): # -> Any:
        ...
    
    @property
    def description(self): # -> None:
        ...
    
    @property
    def name(self): # -> None:
        ...
    
    @property
    def ignore_extra_keys(self): # -> bool:
        ...
    
    def is_valid(self, data, **kwargs): # -> bool:
        """Return whether the given data has passed all the validations
        that were specified in the given schema.
        """
        ...
    
    def validate(self, data, **kwargs):
        ...
    
    def json_schema(self, schema_id, use_refs=..., **kwargs):
        """Generate a draft-07 JSON schema dict representing the Schema.
        This method must be called with a schema_id.

        :param schema_id: The value of the $id on the main schema
        :param use_refs: Enable reusing object references in the resulting JSON schema.
                         Schemas with references are harder to read by humans, but are a lot smaller when there
                         is a lot of reuse
        """
        ...
    


class Optional(Schema):
    """Marker for an optional part of the validation Schema."""
    _MARKER = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    def __hash__(self) -> int:
        ...
    
    def __eq__(self, other) -> bool:
        ...
    
    def reset(self): # -> None:
        ...
    


class Hook(Schema):
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class Forbidden(Hook):
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class Literal:
    def __init__(self, value, description=...) -> None:
        ...
    
    def __str__(self) -> str:
        ...
    
    def __repr__(self): # -> LiteralString:
        ...
    
    @property
    def description(self): # -> None:
        ...
    
    @property
    def schema(self): # -> Any:
        ...
    


class Const(Schema):
    def validate(self, data, **kwargs):
        ...
    


